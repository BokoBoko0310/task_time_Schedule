<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>„Çπ„Ç±„Ç∏„É•„Éº„É´„Çø„Çπ„ÇØÁÆ°ÁêÜ</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Yomogi&display=swap');
        body {
            font-family: 'Yomogi', sans-serif;
            background-color: #f8f8f8;
            color: #2F4F4F;
            text-align: center;
            margin: 0;
            padding: 0;
            position: relative;
            overflow-x: hidden;
        }
        h1 {
            margin: 20px 0;
            font-size: 3em;
            font-weight: bold;
            color: #556B2F;
        }
        .container {
            display: flex;
            justify-content: center;
            align-items: flex-start;
            padding: 20px;
            gap: 20px;
            flex-wrap: wrap;
        }
        .task-container {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            padding: 20px;
            background-color: #e6e6e6;
            border: 2px solid #8B4513;
            border-radius: 10px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
            width: 300px;
            z-index: 1;
            max-height: 400px;
            overflow-y: auto;
        }
        .task {
            margin: 10px 0;
            padding: 10px;
            background-color: #f7ebe9;
            border: 2px solid #8B4513;
            border-radius: 10px;
            min-width: 200px;
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        .task-buttons {
            display: flex;
            justify-content: space-between;
            gap: 10px;
        }
        .task-buttons button {
            flex-grow: 1;
        }
        .task-buttons .start-complete {
            background-color: #6B8E23;
            color: white;
            border: none;
            padding: 5px;
            border-radius: 5px;
            cursor: pointer;
        }
        .task-buttons .edit-delete {
            background-color: #A0522D;
            color: white;
            border: none;
            padding: 5px;
            border-radius: 5px;
            cursor: pointer;
        }
        .schedule {
            background-color: #ffffff;
            border: 2px solid #8B4513;
            border-radius: 10px;
            padding: 20px;
            width: 300px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
            z-index: 1;
            max-height: 400px;
            overflow-y: auto;
        }
        .schedule h2 {
            margin-top: 0;
            color: #556B2F;
            font-size: 1.5em;
            line-height: 1.5;
        }
        .line {
            width: 80%;
            height: 2px;
            background-color: #8B4513;
            margin: 20px auto;
        }
        #task-input, #task-time, button {
            padding: 10px;
            border-radius: 5px;
            border: 2px solid #8B4513;
            margin: 5px 0;
        }
        #task-input, #task-time {
            width: calc(100% - 24px);
        }
        button {
            cursor: pointer;
        }
        #comments, #completed-tasks {
            background-color: #e6e6e6;
            border: 2px solid #8B4513;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            width: 80%;
            margin-left: auto;
            margin-right: auto;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
            z-index: 1;
            max-height: 400px;
            overflow-y: auto;
        }
        ul {
            list-style-type: none;
            padding: 0;
        }
        li {
            margin: 10px 0;
            background-color: #f7ebe9;
            border: 2px solid #8B4513;
            border-radius: 10px;
            padding: 10px;
        }
        .pet {
            position: absolute;
            font-size: 2em;
            animation: move 10s linear infinite;
            pointer-events: none;
        }
        @keyframes move {
            0% { left: 0; top: 0; }
            25% { left: 80%; top: 0; }
            50% { left: 80%; top: 80%; }
            75% { left: 0; top: 80%; }
            100% { left: 0; top: 0; }
        }
        .message {
            position: absolute;
            font-size: 1.5em;
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 10px;
            padding: 10px;
            animation: fade 3s ease-in-out;
            z-index: 2;
        }
        @keyframes fade {
            0% { opacity: 1; }
            100% { opacity: 0; }
        }
    </style>
</head>
<body>
    <h1>üìÖ „Çπ„Ç±„Ç∏„É•„Éº„É´„Çø„Çπ„ÇØÁÆ°ÁêÜ üåø</h1>
    <div class="container">
        <div class="task-container">
            <div>
                <input type="text" id="task-input" placeholder="„Çø„Çπ„ÇØ„ÇíÂÖ•Âäõ">
                <input type="time" id="task-time">
                <button id="add-task-button">ËøΩÂä†</button>
            </div>
            <div id="task-list"></div>
        </div>
        <div class="schedule">
            <h2>üåü ÊÆã„Çä„Çπ„Ç±„Ç∏„É•„Éº„É´ üåü</h2>
            <div id="schedule-list"></div>
        </div>
    </div>
    <div class="line"></div>
    <div id="comments">
        <h2>üìã ÈÄ≤Ë°å‰∏≠„ÅÆ„Çø„Çπ„ÇØ üìã</h2>
        <ul id="comments-list"></ul>
    </div>
    <div id="completed-tasks">
        <h2>‚úÖ ÈÅîÊàê„Åó„Åü„Çø„Çπ„ÇØ ‚úÖ</h2>
        <ul id="completed-tasks-list"></ul>
    </div>
    <div class="pet" id="pet1">üêà</div>
    <div class="pet" id="pet2">üêï</div>
    <script>
        let tasks = [];
        let completedTasks = [];
        let ongoingTasks = [];

        document.getElementById('add-task-button').addEventListener('click', function() {
            addTask();
        });

        function addTask() {
            const taskInput = document.getElementById('task-input');
            const taskTime = document.getElementById('task-time');
            const task = {
                text: taskInput.value,
                time: taskTime.value,
                startTime: null,
                endTime: null
            };
            if (task.text && task.time) {
                tasks.push(task);
                taskInput.value = '';
                taskTime.value = '';
                renderTasks();
                renderSchedule();
            }
        }

        function editTask(index) {
            const newTask = prompt("„Çø„Çπ„ÇØ„ÇíÁ∑®ÈõÜ", tasks[index].text);
            if (newTask !== null) {
                tasks[index].text = newTask;
                renderTasks();
                renderSchedule();
            }
        }

        function deleteTask(index) {
            tasks.splice(index, 1);
            renderTasks();
            renderSchedule();
        }

        function startTask(index) {
            tasks[index].startTime = new Date();
            ongoingTasks.push(tasks[index]);
            renderTasks();
            renderOngoingTasks();
            showMessage("È†ëÂºµ„Å£„Å¶ÔºÅ");
        }

        function completeTask(index) {
            tasks[index].endTime = new Date();
            completedTasks.push(tasks[index]);
            ongoingTasks.splice(index, 1);
            renderTasks();
            renderSchedule();
            renderCompletedTasks();
            renderOngoingTasks();
            showMessage("„ÅäÁñ≤„ÇåÊßòÔºÅ");
        }

        function renderTasks() {
            const taskList = document.getElementById('task-list');
            taskList.innerHTML = '';
            tasks.forEach((task, index) => {
                const taskItem = document.createElement('div');
                taskItem.className = 'task';
                taskItem.innerHTML = `
                    <div>${task.time} - ${task.text}</div>
                    <div class="task-buttons">
                        <button class="start-complete" onclick="startTask(${index})">ÈñãÂßã</button>
                        <button class="start-complete" onclick="completeTask(${index})">ÁµÇ‰∫Ü</button>
                    </div>
                    <div class="task-buttons">
                        <button class="edit-delete" onclick="editTask(${index})">Á∑®ÈõÜ</button>
                        <button class="edit-delete" onclick="deleteTask(${index})">ÂâäÈô§</button>
                    </div>
                `;
                taskList.appendChild(taskItem);
            });
        }

        function renderOngoingTasks() {
            const commentsList = document.getElementById('comments-list');
            commentsList.innerHTML = '';
            ongoingTasks.forEach((task, index) => {
                const taskItem = document.createElement('li');
                taskItem.innerHTML = `${task.time} - ${task.text}`;
                commentsList.appendChild(taskItem);
            });
        }

        function renderSchedule() {
            const scheduleList = document.getElementById('schedule-list');
            scheduleList.innerHTML = '';
            tasks.sort((a, b) => a.time.localeCompare(b.time));
            tasks.forEach(task => {
                const scheduleItem = document.createElement('div');
                scheduleItem.innerHTML = `${task.time} - ${task.text}`;
                scheduleList.appendChild(scheduleItem);
            });
        }

        function renderCompletedTasks() {
            const completedTasksList = document.getElementById('completed-tasks-list');
            completedTasksList.innerHTML = '';
            completedTasks.forEach(task => {
                const duration = task.endTime - task.startTime;
                const durationMinutes = Math.floor(duration / 60000);
                const durationSeconds = Math.floor((duration % 60000) / 1000);
                const completedTaskItem = document.createElement('li');
                completedTaskItem.innerHTML = `${task.text} (${task.time}) - ÁµåÈÅéÊôÇÈñì: ${durationMinutes} ÂàÜ ${durationSeconds} Áßí`;
                completedTasksList.appendChild(completedTaskItem);
            });
        }

        function showMessage(message) {
            const pet1 = document.getElementById('pet1');
            const pet2 = document.getElementById('pet2');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message';
            messageDiv.innerText = message;

            // „É©„É≥„ÉÄ„É†„Å´„Éö„ÉÉ„Éà„ÇíÈÅ∏Êäû„Åó„Å¶„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
            const randomPet = Math.random() < 0.5 ? pet1 : pet2;
            messageDiv.style.left = randomPet.style.left;
            messageDiv.style.top = randomPet.style.top;
            document.body.appendChild(messageDiv);

            setTimeout(() => {
                messageDiv.remove();
            }, 3000);
        }

        // „Éö„ÉÉ„Éà„ÅÆ„É©„É≥„ÉÄ„É†„Å™‰ΩçÁΩÆ„ÇíË®≠ÂÆö„Åô„Çã„Åü„ÇÅ„ÅÆÂàùÊúüÂåñ
        function initPets() {
            const pet1 = document.getElementById('pet1');
            const pet2 = document.getElementById('pet2');
            pet1.style.left = `${Math.random() * 80}%`;
            pet1.style.top = `${Math.random() * 80}%`;
            pet2.style.left = `${Math.random() * 80}%`;
            pet2.style.top = `${Math.random() * 80}%`;
        }

        // „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇ„Å´„Éö„ÉÉ„Éà„ÅÆ‰ΩçÁΩÆ„ÇíÂàùÊúüÂåñ
        window.onload = initPets;
    </script>
</body>
</html>
